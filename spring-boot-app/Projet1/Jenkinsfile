
pipeline{
    agent {
        docker {
        image 'zinebkait/maven-zinebKait-docker-agent:v1''
        args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                //git branch: 'main', url: 'https://github.com/Zineb-tech/Devops.git'
                }
        }
        stage('Build & Test') {
                steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'cd spring-boot-app/Projet1 && mvn clean package'
                }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://54.162.234.21:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd spring-boot-app/Projet1 && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }

            }
        }
    
        stage('Build & Push Docker IMG') {
            environment {
                DOCKER_IMAGE = "zinebKait/ultimate-cicd:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "spring-boot-app/Projet1/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd spring-boot-app/Projet1 && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }  
        }
    
    }

}

